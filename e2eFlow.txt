
Here’s the content:

---

### End-to-End Description of the Financial Data Analysis Framework with AgentLite

---

**1. `manager_agent.py`**

This file manages the workflow of the different agents within the AgentLite framework.

- **Imports**:
  - Imports the required agents like `DataProcessingAgent`, `LLMProcessor`, `VisualizationAgent`, and `FileHandler`.
  - Streamlit is imported for creating an interactive user interface.

- **Class: `AgentManager`**:
  - `__init__`: Initializes the manager by storing instances of each agent.
  - `execute_workflow`: This is the core method that manages the workflow, such as uploading a file, processing it using the agents, and displaying the results and insights using Streamlit.

---

**2. `data_processing_agent.py`**

This file handles the data cleaning, feature engineering, and transformation of the uploaded data.

- **Imports**:
  - Imports `pandas` for data manipulation and sklearn’s `StandardScaler` for feature scaling.

- **Class: `DataProcessingAgent`**:
  - `process_data`: Orchestrates the cleaning, feature engineering, and transformation of the dataset.
  - `clean_data`: Removes any null values in the dataset.
  - `feature_engineering`: Adds new features depending on whether the data represents financial transactions or stock data (e.g., scales amounts and adds a ‘Hour’ feature).
  - `transform_data`: Further normalizes the amount feature for transaction data.

---

**3. `file_handler.py`**

This file manages the file handling processes, allowing users to upload CSV or ZIP files and extract their contents.

- **Imports**:
  - Imports `os` for file directory operations, `zipfile` for handling zip files, and `pandas` for reading CSV files.

- **Class: `FileHandler`**:
  - `__init__`: Initializes the upload directory if it doesn’t exist.
  - `handle_uploaded_file`: Handles the uploaded file, checks if it’s a CSV or ZIP file, and returns the appropriate data.
  - `_extract_zip`: Extracts the contents of ZIP files and loads any CSV files found in the directory.

---

**4. `llm_processor.py`**

This file interacts with GPT-4 through OpenAI’s API to generate insights from the processed data.

- **Imports**:
  - Imports `ChatCompletion` from OpenAI and `PromptGenerator` from the `agentlite_fraud_detection` module.

- **Class: `LLMProcessor`**:
  - `__init__`: Initializes the LLM processor with an API key and sets up the chat completion client.
  - `generate_insights`: Generates task-specific insights using the LLM and a dynamically generated prompt.

---

**5. `promptgen.py`**

This file generates the prompt for the LLM based on the type of data provided.

- **Class: `PromptGenerator`**:
  - `__init__`: Initializes the class.
  - `generate_prompt`: Generates a task-specific prompt based on whether the data represents financial transactions or stock market data.

---

**6. `visualization_agent.py`**

This file visualizes the processed data using `matplotlib` and `seaborn`.

- **Imports**:
  - Imports `matplotlib` for general plotting and `seaborn` for statistical plotting.

- **Class: `VisualizationAgent`**:
  - `visualize_data`: Generates appropriate visualizations based on the type of data (e.g., histograms for transactions and scatter plots for financial data).
  - `visualize_correlation_matrix`: Generates a heatmap to show the correlation between features in the dataset.

---

**7. Testing Files**

You can create test files for each agent, such as `test_visualization_agent.py`, `test_data_processing_agent.py`, etc., to ensure that the framework works as expected. Each of these tests will use `pytest` to test the functionality of the corresponding agents.
